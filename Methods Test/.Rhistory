libs = c('proc', 'lattice')
for (i in libs) library(i, character.only=TRUE)
install.packages('proc')
libs = c('pROC', 'lattice')
for (i in libs) library(i, character.only=TRUE)
install.packages('pROC')
install.packages('pROC', Ncpus=4)
?install.packages
install.packages('pROC', Ncpus=4)
libs = c('pROC', 'lattice')
for (i in libs) library(i, character.only=TRUE)
libs = c('pROC', 'lattice', 'here')
for (i in libs) library(i, character.only=TRUE)
libs = c('pROC', 'lattice', 'here', 'magrittr')
for (i in libs) library(i, character.only=TRUE)
libs = c('pROC', 'lattice', 'here', 'magrittr')
for (i in libs) library(i, character.only=TRUE)
in_clas = "collated_primary_alignment_data.csv"
in_uncl = "collated_unclassified_alignment_data.csv"
in_dir = file.path('Data', 'Pipeline Results', 'Alignments')
clas = here(in_dir, in_clas) %>%
read.csv(stringsAsFactors=FALSE)
uncl = here(in_dir, in_class) %>%
read.csv(stringsAsFactors=FALSE)
uncl = here(in_dir, in_uncl) %>%
read.csv(stringsAsFactors=FALSE)
head(clas)
in_clas = "collated_primary_alignment_data.tsv"
in_uncl = "collated_unclassified_alignment_data.tsv"
in_dir = file.path('Data', 'Pipeline Results', 'Alignments')
clas = here(in_dir, in_clas) %>%
read.table(stringsAsFactors=FALSE)
uncl = here(in_dir, in_uncl) %>%
read.table(stringsAsFactors=FALSE)
head(clas)
clas = here(in_dir, in_clas) %>%
read.table(stringsAsFactors=FALSE, col.names=1)
?list.dirs
list.dirs(here('Data', 'Pipeline Results', 'Alignments'))
clas = here(in_dir, in_clas) %>%
read.table(stringsAsFactors=FALSE, col.names=1, sep='\t')
?read.table
clas = here(in_dir, in_clas) %>%
read.table(stringsAsFactors=FALSE, header=TRUE)
uncl = here(in_dir, in_uncl) %>%
read.table(stringsAsFactors=FALSE, header=TRUE)
head(clas)
head(uncl)
in_clas = "collated_primary_alignment_data.tsv"
in_uncl = "collated_unclassified_alignment_data.tsv"
in_dir = file.path('Data', 'Pipeline Results', 'Alignments')
new_colnames = c(read_id = 'READ_ID',
alignment_genome = 'MATCH_ID',
quality_score = 'QUALITY_SCORE',
lignment_score = 'ALIGNMENT_SCORE',
per_base_divergence = 'DIVERGENCE',
barcode_number = 'BARCODE',
input_file = 'SOURCE',
alignment_tool = 'ALIGNER')
clas = here(in_dir, in_clas) %>%
read.table(stringsAsFactors=FALSE, header=TRUE)
colnames(clas) %<>% new_colnames[.]
uncl = here(in_dir, in_uncl) %>%
read.table(stringsAsFactors=FALSE, header=TRUE)
colnames(uncl) %<>% new_colnames[.]
head(clas)
tail(clas)
head(clas)
clas %<>% split(clas$ALIGNER)
lapply(clas, head)
lapply(clas, head)
process_source = function(x) {
x %<>% strsplit('/')
nx = sapply(x, length)
x %<>% x[nx]
return(x)
}
clas$SOURCE %<>% process_source
process_source = function(x) {
x %<>% as.character %>%
strsplit('/')
nx = sapply(x, length)
x %<>% x[nx]
return(x)
}
clas = here(in_dir, in_clas) %>%
read.table(stringsAsFactors=FALSE, header=TRUE)
head(clas)
colnames(clas) %<>% new_colnames[.]
clas$SOURCE %<>% process_source
process_source = function(x) {
x %<>% as.character %>%
strsplit('/')
nx = sapply(x, length) %T>% print
# x %<>% [nx]
return(x)
}
clas = here(in_dir, in_clas) %>%
read.table(stringsAsFactors=FALSE, header=TRUE)
clas$SOURCE %<>% process_source
process_source = function(x) {
x %<>% as.character %>%
strsplit('/')
print(head(x))
nx = sapply(x, length) %T>% print
# x %<>% [nx]
return(x)
}
clas = here(in_dir, in_clas) %>%
read.table(stringsAsFactors=FALSE, header=TRUE)
clas$SOURCE %<>% process_source
?strsplit
strsplit(clas$SOURCE)
strsplit(clas$SOURCE, '/')
str(clas)
strsplit(clas$SOURCE, '/')
strsplit(clas$SOURCE, "\\/")
strsplit(clas$SOURCE, "/")
class(clas$SOURCE)
head(clas)
colnames(clas) %<>% new_colnames[.]
head(clas)
strsplit(clas$SOURCE, '/')
strsplit(clas$SOURCE, '/') %>% sapply(length)
process_source = function(x) {
x %<>% as.character %>%
strsplit('/') %>%
sapply(function(y) y[length(y)])
# nx = sapply(x, length)
# x %<>%
# return(x)
}
clas = here(in_dir, in_clas) %>%
read.table(stringsAsFactors=FALSE, header=TRUE)
colnames(clas) %<>% new_colnames[.]
clas$SOURCE %<>% process_source
head(clas)
uncl$SOURCE %<>% process_source
head(uncl)
clas %<>% split(clas$ALIGNER)
head(clas)
lapply(clas, head)
