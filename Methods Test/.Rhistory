x = x[, c('barcode', score_name)]
x$ASSIGN = ifelse(x[, score_name] >= cutoff, x[, 'barcode'], 'Unassigned')
p_assign = sum(x$ASSIGN != 'Unassigned')/nreads
p_blanks = sum(x$ASSIGN %in% blanks)
p_misassign = max_misassign * p_blanks * max_blanks
out = c(p_assign = p_assign,
p_blanks = p_blanks,
p_misassign = p_misassign)
out
p_blanks = sum(x$ASSIGN %in% blanks)/n_reads
p_misassign = max_misassign * p_blanks * max_blanks
out = c(p_assign = p_assign,
p_blanks = p_blanks,
p_misassign = p_misassign)
p_blanks = sum(x$ASSIGN %in% blanks)/nreads
p_misassign = max_misassign * p_blanks * max_blanks
out = c(p_assign = p_assign,
p_blanks = p_blanks,
p_misassign = p_misassign)
out
round(out, 3)
round(out, 4)
assign_barcode = function(x, location, cutoff, blanks) {
x = na.omit(x)
nblanks = length(blanks)
nbarcodes = 96
max_blanks = nblanks/nbarcodes
max_misassign = (nbarcodes-1)/nbarcodes
nreads = nrow(x)
score_name = paste0(location, '_score')
x = x[, c('barcode', score_name)]
x$ASSIGN = ifelse(x[, score_name] >= cutoff, x[, 'barcode'], 'Unassigned')
p_assign = sum(x$ASSIGN != 'Unassigned')/nreads
p_blanks = sum(x$ASSIGN %in% blanks)/nreads
p_misassign = max_misassign * p_blanks * max_blanks
out = c(p_assign = p_assign,
p_blanks = p_blanks,
p_misassign = p_misassign)
return(out)
}
assign_barcode(df, 'front', 60, blanks)
assign_barcode(df, 'front', 20, blanks)
assign_barcode(df, 'front', 10, blanks)
cutoff
rm(cutoff)
rm(blanks)
rm(location)
rm(x)
blanks = subset(meta, TYPE=='blank')[, 'BARCODE']
assign_barcode = function(x, location, cutoff, blanks) {
x = na.omit(x)
nblanks = length(blanks)
nbarcodes = 96
max_blanks = nblanks/nbarcodes
max_misassign = (nbarcodes-1)/nbarcodes
nreads = nrow(x)
score_name = paste0(location, '_score')
x = x[, c('barcode', score_name)]
x$ASSIGN = ifelse(x[, score_name] >= cutoff, x[, 'barcode'], 'Unassigned')
p_assign = sum(x$ASSIGN != 'Unassigned')/nreads
p_blanks = sum(x$ASSIGN %in% blanks)/nreads
p_misassign = max_misassign * p_blanks * max_blanks
out = c(p_assign = p_assign,
p_blanks = p_blanks,
p_misassign = p_misassign)
return(out)
}
assign_barcode(df, 'front', 10, blanks)
assign_barcode(df, 'front', 0, blanks)
assign_barcode(df, 'front', 1000, blanks)
assign_barcode(df, 'front', 100, blanks)
assign_barcode(df, 'front', 90, blanks)
vals = sapply(1:100, function(x) assign_barcode(df, 'front', x, blanks))
vals
vals = sapply(1:100, function(x) assign_barcode(df, 'front', x, blanks)) %>%
t
vals
val_rear = sapply(1:100, function(x) assign_barcode(df, 'rear', x, blanks)) %>%
t
val_rear
assign_barcode = function(x, location, cutoff, blanks) {
x = na.omit(x)
nblanks = length(blanks)
nbarcodes = 96
max_blanks = nblanks/nbarcodes
max_misassign = (nbarcodes-1)/nbarcodes
nreads = nrow(x)
score_name = paste0(location, '_score')
x = x[, c('barcode', score_name)]
x$ASSIGN = ifelse(x[, score_name] >= cutoff, x[, 'barcode'], 'Unassigned')
p_assign = sum(x$ASSIGN != 'Unassigned')/nreads
p_blanks = sum(x$ASSIGN %in% blanks)/nreads
p_misassign = max_misassign * p_blanks * max_blanks
out = c(cutoff = cutoff,
p_assign = p_assign,
p_blanks = p_blanks,
p_misassign = p_misassign)
return(out)
}
vals = sapply(1:100, function(x) assign_barcode(df, 'front', x, blanks)) %>%
t
vals = sapply(1:100, function(x) assign_barcode(df, 'front', x, blanks)) %>%
t
val_rear = sapply(1:100, function(x) assign_barcode(df, 'rear', x, blanks)) %>%
t
vals
vals_rear
vals_rear
vals_rear = sapply(1:100, function(x) assign_barcode(df, 'rear', x, blanks)) %>%
t
vals_both = sapply(1:100, function(x) assign_barcode(df, 'both', x, blanks)) %>%
t
vals_both
head(df)
x = df
location = 'both'
cutoff = 10
blanks = blanks
x = na.omit(x)
nblanks = length(blanks)
nbarcodes = 96
max_blanks = nblanks/nbarcodes
max_misassign = (nbarcodes-1)/nbarcodes
nreads = nrow(x)
score_name = paste0(location, '_score')
score_name
x = x[, c('barcode', score_name)]
x
x$ASSIGN = ifelse(x[, score_name] >= cutoff, x[, 'barcode'], 'Unassigned')
x$assign
x$ASSIGN
x
cutoff
head(x)
summary(x[, score_name])
str(x)
df$both_score = apply(df, 1, function(x) min(x['front_score'], x['rear_score'])) %>%
as.numeric# keep minimum score
head(min(df$front_score, df$rear_score))
df$both_score = apply(df[, c('front_score', 'rear_score')], 1, function(x) min(x[1], x[2]))# keep minimum score
head(df)
str(df)
vals_both = sapply(1:100, function(x) assign_barcode(df, 'both', x, blanks)) %>%
t
vals_both
vals_both = sapply(-100:100, function(x) assign_barcode(df, 'both', x, blanks)) %>%
t
vals_both
vals = sapply(1:100, function(x) assign_barcode(df, 'front', x, blanks)) %>%
t %>%
data.frame(location = 'front')
vals = sapply(1:100, function(x) assign_barcode(df, 'front', x, blanks)) %>%
t %>%
data.frame(location = 'front')
vals_rear = sapply(1:100, function(x) assign_barcode(df, 'rear', x, blanks)) %>%
t %>%
data.frame(location = 'rear')
vals = sapply(1:100, function(x) assign_barcode(df, 'front', x, blanks)) %>%
t %>%
data.frame(location = 'front')
vals_rear = sapply(1:100, function(x) assign_barcode(df, 'rear', x, blanks)) %>%
t %>%
data.frame(location = 'rear')
vals_both = sapply(-100:100, function(x) assign_barcode(df, 'both', x, blanks)) %>%
t %>%
data.frame(location = 'both')
scores = c(-100:100)
vals = sapply(scores, function(x) assign_barcode(df, 'front', x, blanks)) %>%
t %>%
data.frame(location = 'front')
vals_rear = sapply(scores, function(x) assign_barcode(df, 'rear', x, blanks)) %>%
t %>%
data.frame(location = 'rear')
vals_rear = sapply(scores, function(x) assign_barcode(df, 'rear', x, blanks)) %>%
t %>%
data.frame(location = 'rear')
vals_both = sapply(scores, function(x) assign_barcode(df, 'both', x, blanks)) %>%
t %>%
data.frame(location = 'both')
vals = rbind(vals, vals_rear, vals_both)
head(vals)
str(vals)
ggplot(data=vals,
aes(x=cutoff,
color=location)) +
geom_point(aes(y=p_blanks),
shape=1) +
geom_point(aes(y=p_misassign),
shape=2) +
))))
ggplot(data=vals,
aes(x=cutoff,
color=location)) +
geom_point(aes(y=p_blanks),
shape=1) +
geom_point(aes(y=p_misassign),
shape=2)
?melt
vals = rbind(vals, vals_rear, vals_both) %>%
melt(id.vars=c('cutoff', 'location'))
head(vals)
scores = c(-100:100)
vals_front = sapply(scores, function(x) assign_barcode(df, 'front', x, blanks)) %>%
t %>%
data.frame(location = 'front')
vals_rear = sapply(scores, function(x) assign_barcode(df, 'rear', x, blanks)) %>%
t %>%
data.frame(location = 'rear')
vals_both = sapply(scores, function(x) assign_barcode(df, 'both', x, blanks)) %>%
t %>%
data.frame(location = 'both')
vals = rbind(vals_front, vals_rear, vals_both) %>%
melt(id.vars=c('cutoff', 'location'))
head(vals)
ggplot(data=vals,
aes(x=cutoff,
y=value,
color=location,
shape=variable)) +
geom_point()
ggplot(data=vals,
aes(x=cutoff,
y=value,
color=location,
shape=variable)) +
geom_point() +
geom_vline(aes(xintercept=60))
libs = c('lattice', 'here', 'magrittr', 'ggplot2', 'reshape2')
for (i in libs) library(i, character.only=TRUE)
df = here('Data', 'barcoding_summary.txt') %>%
read.table(header=TRUE, stringsAsFactors=FALSE)
meta = here('Data', 'MinION CLC Barcodes.csv') %>%
read.csv(stringsAsFactors=FALSE)
names(df)
summary(df$barcode_front_id == df$barcode_rear_id)
keep_cols = c('read_id',
'barcode_arrangement',
'barcode_front_id',
'barcode_front_score',
'barcode_front_foundseq_length',
'barcode_rear_id',
'barcode_rear_score',
'barcode_rear_foundseq_length')
df = df[keep_cols]
names(df) %<>% gsub('barcode_', '', .) %>%
gsub('foundseq_', '', .) %>%
gsub('arrangement', 'barcode', .)
df$barcode %<>% gsub('barcode', 'BC', .)
head(df)
df$front_id %<>% gsub('_FWD', '', .)
df$front_id %<>% gsub('_FWD', '', .)
df$rear_id %<>% gsub('_REV', '', .)# strsplit('_') %>%
head(df)
summary(df$front_id == df$rear_id)
ggplot(data=vals,
aes(x=cutoff,
y=value,
color=location,
shape=variable)) +
geom_point(alpha=0.2) +
geom_vline(aes(xintercept=60))
ggplot(data=vals,
aes(x=cutoff,
y=value,
color=location,
shape=variable)) +
geom_point(alpha=0.3) +
geom_vline(aes(xintercept=60))
ggplot(data=vals,
aes(x=cutoff,
y=value,
color=location,
shape=variable)) +
geom_smooth(alpha=0.3) +
geom_vline(aes(xintercept=60))
ggplot(data=vals,
aes(x=cutoff,
y=value,
color=location,
shape=variable)) +
geom_point(alpha=0.3) +
geom_vline(aes(xintercept=60))
ggplot(data=vals,
aes(x=cutoff,
y=value,
color=location,
shape=variable)) +
geom_point(alpha=0.5) +
geom_vline(aes(xintercept=60))
head(df)
sum(df$front_id == df$rear_id)/nrow(df)
round(sum(df$front_id == df$rear_id)/nrow(df), 3)*100
vals
pltdf = melt(vals, id.vars=c('cutoff', 'location'))
vals = rbind(vals_front, vals_rear, vals_both) %>%
melt(id.vars=c('cutoff', 'location'))
pltdf = melt(vals, id.vars=c('cutoff', 'location'))
ggplot(data=pltdf,
aes(x=cutoff,
y=value,
color=location,
shape=variable)) +
geom_point(alpha=0.5) +
geom_vline(aes(xintercept=60))
vals = rbind(vals_front, vals_rear, vals_both)
pltdf = melt(vals, id.vars=c('cutoff', 'location'))
ggplot(data=pltdf,
aes(x=cutoff,
y=value,
color=location,
shape=variable)) +
geom_point(alpha=0.5) +
geom_vline(aes(xintercept=60))
head(vals)
.000151*(6/96)
scores = c(-100:100)
vals = c('front', 'rear', 'both') %>%
lapply(function(y) {
out = sapply(scores, function(x) assign_barcode(df, y, x, blanks)) %>%
t %>%
data.frame(location = y)
return(out)
}) %>%
do.call(rbind, .)
blanks = subset(meta, TYPE=='blank')[, 'BARCODE']
assign_barcode = function(x, location, cutoff, blanks) {
x = na.omit(x)
nblanks = length(blanks)
nbarcodes = 96
max_blanks = nblanks/nbarcodes
max_misassign = (nbarcodes-1)/nbarcodes
nreads = nrow(x)
score_name = paste0(location, '_score')
x$ASSIGN = ifelse(x[, score_name] >= cutoff, x[, 'barcode'], 'Unassigned')
p_assign = sum(x$ASSIGN != 'Unassigned')/nreads
p_blanks = sum(x$ASSIGN %in% blanks)/nreads
p_misassign = max_misassign * p_blanks * max_blanks
out = c(cutoff = cutoff,
p_assign = p_assign,
p_blanks = p_blanks,
p_misassign = p_misassign)
return(out)
}
scores = c(-100:100)
vals = c('front', 'rear', 'both') %>%
lapply(function(y) {
out = sapply(scores, function(x) assign_barcode(df, y, x, blanks)) %>%
t %>%
data.frame(.,
location = y)
return(out)
}) %>%
do.call(rbind, .)
knitr::opts_chunk$set(message=FALSE,
warning=FALSE,
fig.align='center')
libs = c('lattice', 'here', 'magrittr', 'ggplot2', 'reshape2')
for (i in libs) library(i, character.only=TRUE)
df = here('Data', 'barcoding_summary.txt') %>%
read.table(header=TRUE, stringsAsFactors=FALSE)
meta = here('Data', 'MinION CLC Barcodes.csv') %>%
read.csv(stringsAsFactors=FALSE)
keep_cols = c('read_id',
'barcode_arrangement',
'barcode_front_id',
'barcode_front_score',
'barcode_front_foundseq_length',
'barcode_rear_id',
'barcode_rear_score',
'barcode_rear_foundseq_length')
df = df[keep_cols]
names(df) %<>% gsub('barcode_', '', .) %>%
gsub('foundseq_', '', .) %>%
gsub('arrangement', 'barcode', .)
df$barcode %<>% gsub('barcode', 'BC', .)
df$front_id %<>% gsub('_FWD', '', .)
df$rear_id %<>% gsub('_REV', '', .)
df %<>%
merge(meta[, c('BARCODE', 'TYPE')],
by.x='barcode',
by.y='BARCODE',
all=TRUE)
head(df)
pltdf = rbind(
data.frame(df[, c('front_length',
'front_score')] %>%
set_names(c('length', 'score')),
location = 'front'
),
data.frame(df[, c('rear_length',
'rear_score')] %>%
set_names(c('length', 'score')),
location = 'rear'
)
)
ggplot(pltdf,
aes(x=score,
y=length)) +
facet_wrap(~location) +
scale_fill_continuous(type='viridis') +
geom_bin2d() +
geom_vline(aes(xintercept=60), color='tomato2') +
geom_hline(aes(yintercept=60), color='tomato2') +
theme_light()
ggplot(data=melt(pltdf),
aes(x=value,
color=location)) +
facet_wrap(~variable,
scales='free') +
geom_vline(aes(xintercept=60)) +
geom_density() +
theme_light()
nr = nrow(df)
find_p = function(x, val) {
x %<>% na.omit
out = sum(x < val) / length(x)
return(out)
}
c(front = find_p(df$front_score, 60),
rear = find_p(df$rear_score, 60)) %>%
round(3)
df$max_location = ifelse(df$front_score >= df$rear_score,
'front',
'rear')
df$agree = df$front_id == df$rear_id
df$one_way = ifelse(df$max_location=='front',
df$front_id,
df$rear_id)
df$both_score = apply(df[, c('front_score', 'rear_score')], 1, function(x) min(x[1], x[2]))# keep minimum score
bc = seq_len(96)
bad_bc = seq_len(6)
nseq = 10000
truth = sample(bc, nseq, replace=TRUE)
perms = sapply(seq_len(100), function(x) sample(bc, nseq, replace=TRUE))
misassign = apply(perms, c(1,2), function(x) x %in% bad_bc)
misassign = colSums(misassign)/nrow(misassign)
mis1 = apply(perms, 2, function(x) x == truth)
mis1 = colSums(mis1)/nrow(mis1)
t.test(misassign/6, mis1)
blanks = subset(meta, TYPE=='blank')[, 'BARCODE']
assign_barcode = function(x, location, cutoff, blanks) {
x = na.omit(x)
nblanks = length(blanks)
nbarcodes = 96
max_blanks = nblanks/nbarcodes
max_misassign = (nbarcodes-1)/nbarcodes
nreads = nrow(x)
score_name = paste0(location, '_score')
x$ASSIGN = ifelse(x[, score_name] >= cutoff, x[, 'barcode'], 'Unassigned')
p_assign = sum(x$ASSIGN != 'Unassigned')/nreads
p_blanks = sum(x$ASSIGN %in% blanks)/nreads
p_misassign = max_misassign * p_blanks * max_blanks
out = c(cutoff = cutoff,
p_assign = p_assign,
p_blanks = p_blanks,
p_misassign = p_misassign)
return(out)
}
vals_front = sapply(scores, function(x) assign_barcode(df, 'front', x, blanks)) %>%
t %>%
data.frame(location = 'front')
head(vals_front)
vals = c('front', 'rear', 'both') %>%
lapply(function(y) {
out = sapply(scores, function(x) assign_barcode(df, y, x, blanks)) %>%
t %>%
data.frame(location =)
}) %>%
do.call(rbind, .)
vals = c('front', 'rear', 'both') %>%
lapply(function(y) {
out = sapply(scores, function(x) assign_barcode(df, y, x, blanks)) %>%
t %>%
data.frame(location = y)
}) %>%
do.call(rbind, .)
head(vals)
summary(vals)
nrow(df)
nrow(na.omit(df))
pltdf = melt(vals, id.vars=c('cutoff', 'location'))
Visualize:
```{r}
pltdf = melt(vals, id.vars=c('cutoff', 'location'))
ggplot(data=pltdf,
aes(x=cutoff,
y=value,
color=location,
shape=variable)) +
geom_point(alpha=0.5) +
geom_vline(aes(xintercept=60))
```
pltdf = melt(vals, id.vars=c('cutoff', 'location'))
ggplot(data=pltdf,
aes(x=cutoff,
y=value,
color=location,
shape=variable)) +
ylab('Proportion of Reads') +
geom_point(alpha=0.5) +
geom_vline(aes(xintercept=60))
head(vals)
ggplot(data=pltdf,
aes(x=cutoff,
y=value,
color=location,
shape=variable)) +
scale_color_brewer(palette='Dark2') +
ylab('Proportion of Reads') +
geom_point(alpha=0.5) +
geom_vline(aes(xintercept=60)) +
theme_minimal()
