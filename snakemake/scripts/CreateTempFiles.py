import sys
import hashlib
import os
import shutil
import re


class CreateTempFiles:
    def __init__(self, input_file_path, save_directory, sample):
        """
        This class will move the input file to a sub-folder within a temporary folder under the save directory.
        The temp directory does NOT need to be passed in, it will be created by the class
        The sub-folder name will be generated by creating a hash of the input file
        Ultimately, the resulting directory will look as follows:
            |-- save_directory
                |-- Folder_A
                    |-- data. . .
                |-- Folder_B
                    |-- data. . .
                |-- .temp          <-- ** This is the structure we are making **
                    |-- folder_one
                    |   |-- file_one
                    |-- folder_two
                    |   |-- file_one
        Args:
            input_file_path (str): This is the exact file path, including file name
            save_directory (str): This is where the .temp folder (and any subfolders) should be created
        """
        # set up our variables
        # then create the path for our temporary directory
        self.input_file_path = input_file_path
        self.save_directory = save_directory
        self.sample_name = str(sample)

        # find the start of our sample name in the save_directory
        self.parent_folder = re.search(self.sample_name, self.save_directory)

        # we will try to extract the sample name from the save_directory
        # if this doesn't work, assume we can place .temp at the end of the save directory
        try:
            # now we can add our temp folder before the start of the output
            self.temp_folder = self.save_directory[0:self.parent_folder.start()] + ".temp"
        except AttributeError:
            self.temp_folder = self.save_directory + ".temp"

        # collect the subfolder name by creating a hash of the input file, then create the subfolder path
        self.temp_subfolder_name = self.__return_hash_as_string(self.input_file_path)
        self.temp_subfolder_name = self.temp_folder + "/" + self.temp_subfolder_name

        # create the path for our new file under the temp directory
        self.new_file_path = self.temp_subfolder_name + "/" + os.path.basename(self.input_file_path)

        # create the path to the temp_subfolder
        os.makedirs(self.temp_subfolder_name, exist_ok=True)

        # create the file by opening it
        open(self.new_file_path, 'w').close()

        # now copy the file from the input path to the new path
        shutil.copy2(self.input_file_path, self.new_file_path)

        self.__return_hash_folder()


    def __return_hash_as_string(self, input_file):
        """
        This function will create a hash of the content foudn in self.input_file_path and return the results as a string
        This code was found and adapted from the following link: https://stackoverflow.com/questions/3431825/generating-an-md5-checksum-of-a-file
        Returns: A string containing the hash of the input file
        """
        chunk_size = 32768  # read 32kb at a time. This is necessary for large files, otherwise the entire file will be read into memory
        md5_hash = hashlib.md5()

        with open(input_file, 'rb') as input_stream:
            chunk_data = input_stream.read(chunk_size)

            # while data is present, continue
            while len(chunk_data) > 0:
                md5_hash.update(chunk_data)
                chunk_data = input_stream.read(chunk_size)

        # return the value in a string format
        return md5_hash.hexdigest()

    def __return_hash_folder(self):
        """
        This method will return the location of the hash folder, NOT the file within.
        This is done by writing to sys.stdout, which can be picked up by snakemake
        Returns: Hash folder location
        """
        sys.stdout.write(self.temp_subfolder_name)

if __name__ == '__main__':
    args = sys.argv

    # try to get arguments from items passed in (i.e. called from snakemake)
    # if this fails, assume a direct run (i.e. not from snakemake, testing purposes)
    try:
        # this will collect arguments passed in from snakemake
        input_file = args[1]
        save_directory = args[2]
        sample = args[3]
    except IndexError:
        input_file = "/Users/joshl/PycharmProjects/ARS/Results/Basecall/FAL03879_67a0761e_11/fastq_runid_67a0761ea992f55d7000e748e88761780ca1bb60_0_0.fastq"
        save_directory = "/Users/joshl/Desktop/output/"
        sample = None

    CreateTempFiles(input_file, save_directory, sample)