configfile: "config.yaml"

# functions to return file/folder paths
def ReturnBarcodeFolderNames():
    import os
    folder_names = list()
    for root, directory, files in os.walk(config['results_folder'] + "Basecall/"):
        for direc in directory:
            if "fastq_runid_" not in direc:
                if "barcode" not in direc:
                    folder_paths.append(direc)
    return folder_names


# Wildcard section; this is how file names will be retrieved
# commas are added after the file name to "unpack" the tuple that is generated
BASECALL_SAMPLES, = glob_wildcards(config['results_folder'] + "/DataFiles/fast5/{fast5_files}.fast5")
BARCODE_SAMPLES, = glob_wildcards(config['results_folder'] + "Basecall/{fast5_files}.fastq")


rule all:
    input:
        # basecall
        expand(config['results_folder'] + "Basecall/{fast5_files}", fast5_files=BASECALL_SAMPLES),

        # barcode
        expand(config['results_folder'] + "Barcode/{fastq_files}", fastq_files=BARCODE_SAMPLES),

        # merge barcode files
        expand(config['results_folder'] + ".tempMergeFolder/{folder}", folder=ReturnBarcodeFolderNames)


rule basecall:
    input:
        config['results_folder'] + "DataFiles/fast5/{fast5_files}.fast5"
    output:
        directory(config['results_folder'] + "Basecall/{fast5_files}"),
    conda:
        "envs/pythonEnv.yaml"
    shell:
        "ls {input}"

        " | "  # pipe results from `ls {input}` into guppy_basecaller

        # we are not giving guppy an input path. It will assume the input from the `ls` command
        "guppy_basecaller "
        "--quiet "
        "--save_path {output} "
        "--config dna_r9.4.1_450bps_fast.cfg "
        "--num_callers 1 "
        "--cpu_threads_per_caller 2 "

        " && "

         "echo BASECALL FILE OUTPUT: {output}"


rule barcode:
    input:
        config['results_folder'] + "Basecall/{fastq_files}.fastq"
    output:
        directory(config['results_folder'] + "Barcode/{fastq_files}")
    params:
        return_input_directories = config['parent_folder'] + "snakemake/scripts/ReturnInputDirectory.py"
    conda:
        "envs/pythonEnv.yaml"
    shell:
        "INPUT_DIREC=`python3 {params.return_input_directories} {input}`"

        " && "

        "guppy_barcoder "
        "--quiet "
        "--input_path $INPUT_DIREC "
        "--save_path {output} "
        "--config configuration.cfg "
        "--worker_threads 2 "
        "--barcode_kits EXP-PBC096 "
        "--require_barcodes_both_ends "

        " && "

        "echo BARCODE FILE OUTPUT: {output}"

rule merge_files:
    input:
        expand(config['results_folder'] + "Barcode/{folder}", folder=ReturnBarcodeFolderNames)
    output:
        temp(directory(config['results_folder'] + ".tempMergeFolder"))
    params:
        config['results_folder'] + "Barcode/{folders}"
    shell:
        "echo {params}"