import glob
import os
from pathlib import Path

configfile: "config.yaml"

def get_barcode_folders(wildcards):
    checkpoint_output = checkpoints.basecall_barcode.get(**wildcards).output[0]
    barcodes = set()  # a set is like a list, but only stores unique values
    for folder in os.listdir(checkpoint_output):
        full_path = os.path.join(checkpoint_output, folder)
        if Path(full_path).is_dir():
            barcodes.add(folder)

    merge_files = [config['results_folder'] + "Barcode/" + barcode + ".merged.fastq" for barcode in barcodes]
    return merge_files


FAST5_FILES = glob_wildcards(config['results_folder'] + "DataFiles/fast5/{fast5_file}.fast5").fast5_file

rule all:
    input:
        # basecall, barcode, and merge files
        get_barcode_folders,

        # nanoQC pre trim
        expand(config['results_folder'] + "NanoQC/Pre-Trim/{barcode}",
               barcode=set(glob_wildcards(config['results_folder'] + ".barcodeTempOutput/{barcode}/{fastq_file}.fastq").barcode)),

        # trim reads
        expand(config['results_folder'] + "Trim/{barcode}.trim.fastq",
               barcode=set(glob_wildcards(config['results_folder'] + ".barcodeTempOutput/{barcode}/{fastq_file}.fastq").barcode)),

        # nanoQC post trim
        expand(config['results_folder'] + "NanoQC/Post-Trim/{barcode}",
               barcode=set(glob_wildcards(config['results_folder'] + ".barcodeTempOutput/{barcode}/{fastq_file}.fastq").barcode))



checkpoint basecall_barcode:
    input:
        config['results_folder'] + "DataFiles/fast5/"
    output:
        directory(config['results_folder'] + ".barcodeTempOutput/")
    conda:
        "envs/pythonEnv.yaml"
    shell:
        "guppy_basecaller "
        "--quiet "
        "--input_path {input} "
        "--save_path {output} "
        "--config dna_r9.4.1_450bps_fast.cfg "
        "--barcode_kits EXP-PBC096 "
        "--num_callers 2 "
        "--cpu_threads_per_caller 6 "
        "--recursive "

        " && "
        "echo BASECALL: {output}"



def merge_files_input(wildcards):
    return glob.glob(config['results_folder'] + f".barcodeTempOutput/{wildcards.barcode}/*.fastq")
rule merge_files:
    input:
        merge_files_input
    output:
        config['results_folder'] + "Barcode/{barcode}.merged.fastq"
    params:
        input_folder = config['results_folder'] + ".barcodeTempOutput",
        save_folder = config['results_folder'] + "Barcode"
    shell:
        r"""
        for item in {input}; do
            cat $item >> {output}
            #rm $item
        done
        
        # move other files out of .barcodeTempOutput and into the save directory
        # we are only going to move them if they are present
        if [[ -f {params.input_folder}/*.txt ]]; then
            mv {params.input_folder}/*.txt {params.save_folder}/
        fi
        
        if [[ -f {params.input_folder}/*.log ]]; then
            mv {params.input_folder}/*.log {params.save_folder}/
        fi
        
        if [[ -f {params.input_folder}/*.js ]]; then
            mv {params.input_folder}/*.js {params.save_folder}/
        fi
        """



rule NanoQCPreTrim:
    input:
        rules.merge_files.output[0]
    output:
        directory(config['results_folder'] + "NanoQC/Pre-Trim/{barcode}")
    shell:
        r"""
        nanoQC -o {output} {input}
        """



rule trim:
    input:
        rules.merge_files.output[0]
    output:
        config['results_folder'] + "Trim/{barcode}.trim.fastq"
    params:
        three_prime_adapter = config['trim_three_prime_adapter'],
        five_prime_adapter = config['trim_five_prime_adapter'],
        error_rate = config['trim_error_rate']
    shell:
        r"""
        cutadapt \
        --revcomp \
        --quiet \
        --cores 0 \
        --adapter {params.three_prime_adapter} \
        --front {params.five_prime_adapter} \
        --error-rate {params.error_rate} \
        --output {output} \
        {input}
        """



rule NanoQCPostTrim:
    input:
        rules.trim.output[0]
    output:
        config['results_folder'] + "NanoQC/Post-Trim/{barcode}"
    shell:
        r"""
        nanoQC -o {output} {input}
        """


