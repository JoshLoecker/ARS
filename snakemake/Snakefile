configfile: "config.yaml"


# Wildcard section; this is how file names will be retrieved
# commas are added after the file name to "unpack" the tuple that is generated
BASECALL_SAMPLES, = glob_wildcards(config['results_folder'] + "DataFiles/fast5/{fast5_file}.fast5")
BARCODE_SAMPLES, = glob_wildcards(config['results_folder'] + "Basecall/{fastq_file}.fastq")
MERGE_FILES_SAMPLES, = glob_wildcards(config['results_folder'] + "Basecall/{fastq_file}.fastq")

rule all:
    input:
        # basecall
        expand(config['results_folder'] + "Basecall/{fast5_file}", fast5_file=BASECALL_SAMPLES),

        # barcode
        expand(config['results_folder'] + "Barcode/{fastq_file}", fastq_file=BARCODE_SAMPLES),

        # merge files
        config['results_folder'] + "Barcode/merged_files.txt"

rule basecall:
    input:
        config['results_folder'] + "DataFiles/fast5/{fast5_file}.fast5"
    output:
        directory(config['results_folder'] + "Basecall/{fast5_file}")
    conda:
        "envs/pythonEnv.yaml"
    shell:
        "ls {input}"

        " | "  # pipe results from `ls {input}` into guppy_basecaller

        # we are not giving guppy an input path. It will assume the input from the `ls` command
        "guppy_basecaller "
        "--quiet "
        "--save_path {output} "
        "--config dna_r9.4.1_450bps_fast.cfg "
        "--num_callers 1 "
        "--cpu_threads_per_caller 2 "

        " && "

        "echo BASECALL FILE OUTPUT: {output}"


rule barcode:
    input:
        config['results_folder'] + "Basecall/{fastq_file}.fastq"
    output:
        directory = directory(config['results_folder'] + "Barcode/{fastq_file}")
    params:
        return_input_directories = config['parent_folder'] + "snakemake/scripts/ReturnInputDirectory.py",
        return_output_directories = config['parent_folder'] + "snakemake/scripts/ReturnBarcodeOutputDirectory.py",
        merge_files = config['parent_folder'] + "snakemake/scripts/MergeFiles.py"
    conda:
        "envs/pythonEnv.yaml"
    shell:
        "INPUT_DIREC=`python3 {params.return_input_directories} {input}`"

        " && "

        "guppy_barcoder "
        "--quiet "
        "--input_path $INPUT_DIREC "
        "--save_path {output.directory} "
        "--config configuration.cfg "
        "--worker_threads 2 "
        "--barcode_kits EXP-PBC096 "
        "--require_barcodes_both_ends "

        " && "

        "echo BARCODE FILE OUTPUT: {output.directory}"


rule merge_files:
    output:
        # TODO: Remove the `temp()` flag
        temp(touch(config['results_folder'] + "Barcode/merged_files.txt"))
    params:
        samples = BARCODE_SAMPLES,
        barcode_folder = config['results_folder'] + "Barcode/"
    script:
        "scripts/MergeFiles.py"