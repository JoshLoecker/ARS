import os
from pathlib import Path
configfile: "config.yaml"

def return_barcode_numbers(path: str):
    """
    This function will return a list of barcode numbers under the directory passed in
    Args:
        path: The directory that should be searched
    Returns: A list of strings containing directory names
    """
    barcode_numbers = set()
    for item in os.scandir(path):
        item = item.name
        if "barcode" in item:
            barcode_numbers.add(item)
        elif "unclassified" in item:
            barcode_numbers.add(item)
    return barcode_numbers

def barcode_merge_files(wildcards):
    checkpoint_output = checkpoints.barcode.get(**wildcards).output[0]
    barcodes = set()  # a set is like a list, but only stores unique values
    for folder in os.listdir(checkpoint_output):
        full_path = os.path.join(checkpoint_output, folder)
        if Path(full_path).is_dir():
            barcodes.add(folder)

    merge_files = [config['results_folder'] + "Barcode/" + barcode + ".merged.fastq" for barcode in barcodes]
    return merge_files

def nanoqc_pre_trim(wildcards):
    checkpoint_output = checkpoints.barcode.get(**wildcards).output[0]
    return expand(
        config['results_folder'] + "NanoQC/Pre-Trim/{barcode}",
        barcode=return_barcode_numbers(checkpoint_output)
    )

def trim_reads(wildcards):
    checkpoint_output = checkpoints.barcode.get(**wildcards).output[0]
    return expand(
        config['results_folder'] + "Trim/{barcode}.trim.fastq",
        barcode=return_barcode_numbers(checkpoint_output)
    )

def nanoqc_post_trim(wildcards):
    checkpoint_output = checkpoints.barcode.get(**wildcards).output[0]
    return expand(
        config['results_folder'] + "NanoQC/Post-Trim/{barcode}",
        barcode=return_barcode_numbers(checkpoint_output)
    )

def NanoFilt(wildcards):
    checkpoint_output = checkpoints.barcode.get(**wildcards).output[0]
    return expand(
        config['results_folder'] + "NanoFilt/{barcode}.nanofilt.fastq",
        barcode=return_barcode_numbers(checkpoint_output)
    )

def guppy_aligner(wildcards):
    checkpoint_output = checkpoints.barcode.get(**wildcards).output[0]
    return expand(
        config['results_folder'] + "Alignment/guppy/sam_files/{barcode}.guppy.sam",
               barcode=return_barcode_numbers(checkpoint_output)
    )

def minimap_aligner(wildcards):
    checkpoint_output = checkpoints.barcode.get(**wildcards).output[0]
    return expand(
        config['results_folder'] + "Alignment/minimap/{barcode}.minimap.sam",
        barcode=return_barcode_numbers(checkpoint_output)
    )

def vsearch_aligner(wildcards):
    checkpoint_output = checkpoints.barcode.get(**wildcards).output[0]
    return expand(
        config['results_folder'] + "Alignment/vsearch/{barcode}.vsearch.uc",
        barcode=return_barcode_numbers(checkpoint_output)
    )

def nanoplot(wildcards):
    checkpoint_output = checkpoints.barcode.get(**wildcards).output[0]
    return expand(
        config['results_folder'] + "Visuals/NanoPlot/{barcode}/",
        barcode=return_barcode_numbers(checkpoint_output)
    )



FAST5_FILES = glob_wildcards(config['results_folder'] + "DataFiles/fast5/{fast5_file}.fast5").fast5_file
rule all:
    input:
        config['results_folder'] + "Basecall/",  #................................................ Basecaller
        barcode_merge_files,  # .................................................................. Barcoder/Merge Files
        nanoqc_pre_trim,  # ...................................................................... NanoQC Pre-Trim
        trim_reads,  # ........................................................................... Trim (Cutadapt)
        nanoqc_post_trim,  # ..................................................................... NanoQC Post-Trim
        NanoFilt,  # ............................................................................. NanoFilt
        guppy_aligner,  # ........................................................................ Guppy Aligner
        minimap_aligner,  # ...................................................................... MiniMap Aligner
        vsearch_aligner,  # ...................................................................... VSearch Aligner
        config['results_folder'] + "CountReads/count.reads.basecall.csv",  # ..................... Count reads after basecall
        config['results_folder'] + "CountReads/count.reads.barcode.csv",  # ...................... Count reads after barcode (and merge files)
        config['results_folder'] + "CountReads/count.reads.trim.csv",  # ......................... Count reads after trimming
        config['results_folder'] + "CountReads/count.reads.nanofilt.csv",  # ..................... Count reads after NanoFilt
        config['results_folder'] + "CountReads/count.reads.guppy.csv",  # ........................ Count reads after guppy aligner
        config['results_folder'] + "CountReads/master.data.set.csv",  # .......................... Count reads create master sheet
        config['results_folder'] + "Visuals/NanoPlot/",  # ....................................... NanoPlot
        config['results_folder'] + "Visuals/Plotly/Histograms/plotly.barcode.histogram.html",    # Plotly barcode histogram
        config['results_folder'] + "Visuals/Plotly/Histograms/plotly.cutadapt.histogram.html",   # Plotly cutadapt histogram
        config['results_folder'] + "Visuals/Plotly/Histograms/plotly.filtering.histogram.html",  # Plotly filtering histogram
        config['results_folder'] + "Visuals/Plotly/Histograms/plotly.mapping.histogram.html",    # Plotly mapping histogram
        config['results_folder'] + "Visuals/Plotly/plotly.box.whisker.html"  #.................... Plotly box and whisker plot



rule basecall:
    input:
        config['results_folder'] + "DataFiles/fast5/"
    output:
        directory(config['results_folder'] + "Basecall/")
    params:
        configuration = config["basecall_configuration"],
        callers = config['num_callers'],
        threads_per_caller = config['num_threads_per_caller']
    shell:
        r"""
        guppy_basecaller \
        --config {params.configuration} \
        --input_path {input} \
        --save_path {output} \
        --num_callers {params.callers} \
        --cpu_threads_per_caller {params.threads_per_caller} \
        --recursive
        """



checkpoint barcode:
    input:
        rules.basecall.output[0]
    output:
        directory(config['results_folder'] + ".barcodeTempOutput/")
    params:
        barcode_kit = config['barcode_kit']
    shell:
        r"""
        guppy_barcoder \
        -i {input} \
        -s {output} \
        --recursive \
        --barcode_kits {params.barcode_kit}
        """



def merge_files_input(wildcards):
    import glob
    return glob.glob(config['results_folder'] + f".barcodeTempOutput/{wildcards.barcode}/*.fastq")
rule merge_files:
    input:
        merge_files_input
    output:
        config['results_folder'] + "Barcode/{barcode}.merged.fastq"
    params:
        input_folder = config['results_folder'] + ".barcodeTempOutput",
        save_folder = config['results_folder'] + "Barcode"
    shell:
        r"""
        echo {input}
        for item in {input}; do
            cat $item >> {output}
            #rm $item
        done
        
        # move other files out of .barcodeTempOutput and into the save directory
        # we are only going to move them if they are present
        if [[ -f {params.input_folder}/barcoding_summary.txt ]]; then
            mv {params.input_folder}/barcoding_summary.txt {params.save_folder}/barcoding_summary.txt
        fi
        
        # this does not appear to work right now, not sure why
        if [[ -f `ls {params.input_folder}/*.log` ]]; then
            echo FILE FOUND
            mv {params.input_folder}/*.log {params.input_folder}/*.log 2>/dev/null
        fi
        """



rule NanoQCPreTrim:
    input:
        rules.merge_files.output[0]
    output:
        directory(config['results_folder'] + "NanoQC/Pre-Trim/{barcode}")
    shell:
        r"""
        nanoQC -o {output} {input}
        """



rule cutadapt:
    input:
        rules.merge_files.output[0]
    output:
        config['results_folder'] + "Trim/{barcode}.trim.fastq"
    params:
        three_prime_adapter = config['trim_three_prime_adapter'],
        five_prime_adapter = config['trim_five_prime_adapter'],
        error_rate = config['trim_error_rate']
    shell:
        r"""
        cutadapt \
        --revcomp \
        --quiet \
        --cores 0 \
        --adapter {params.three_prime_adapter} \
        --front {params.five_prime_adapter} \
        --error-rate {params.error_rate} \
        --output {output} \
        {input}
        """



rule NanoQCPostTrim:
    input:
        rules.cutadapt.output[0]
    output:
        directory(config['results_folder'] + "NanoQC/Post-Trim/{barcode}")
    shell:
        r"""
        nanoQC -o {output} {input}
        """



rule filtering:
    input:
        rules.cutadapt.output[0]
    output:
        config['results_folder'] + "NanoFilt/{barcode}.nanofilt.fastq"
    shell:
        r"""
        touch {output}
        NanoFilt {input} > {output}
        """



rule guppy_aligner:
    input:
        rules.filtering.output[0]
    output:
        sam_files = config['results_folder'] + "Alignment/guppy/sam_files/{barcode}.guppy.sam",
        alignment_summary = config['results_folder'] + "Alignment/guppy/alignment_summary/{barcode}.alignment.summary.csv",
        log_file = config['results_folder'] + "Alignment/guppy/logs/{barcode}.guppy.log",
    params:
        temp_input = config['results_folder'] + "Alignment/guppy/.{barcode}.temp.input",
        temp_output = config['results_folder'] + "Alignment/guppy/.{barcode}.temp.output",
        alignment_reference = config['alignment_reference_file']
    shell:
        r"""
        # move input files to our temp folder
        # this is required because guppy_aligner wants folders as input
        mkdir -p {params.temp_input}
        cp {input} {params.temp_input}
        
        # run alignment
        guppy_aligner \
        --input_path {params.temp_input} \
        --save_path {params.temp_output} \
        --align_ref {params.alignment_reference}
        
        # move files from the temp output to the appropriate folders
        # a temp output allows for better organization
        mv {params.temp_output}/*.sam {output.sam_files}
        mv {params.temp_output}/*.txt {output.alignment_summary}
        mv {params.temp_output}/*.log {output.log_file}
        
        # remove our temporary input and output files
        rm -rf {params.temp_input} {params.temp_output}
        """



rule minimap_aligner:
    input:
        rules.filtering.output[0]
    output:
        config['results_folder'] + "Alignment/minimap/{barcode}.minimap.sam"
    params:
        alignment_reference = config['alignment_reference_file']
    shell:
        r"""
        touch {output}
        
        minimap2 \
        -ax map-ont \
        {params.alignment_reference} \
        {input} > {output}
        """



rule fq2fa:
    input:
        rules.filtering.output[0]
    output:
        temp(config['results_folder'] + "Alignment/vsearch/.{barcode}.temp.fasta")
    shell:
        r"""
        seqkit fq2fa {input} > {output}
        """
rule vsearch_aligner:
    input:
        rules.fq2fa.output[0]
    output:
        config['results_folder'] + "Alignment/vsearch/{barcode}.vsearch.uc"
    params:
        alignment_reference = config['alignment_reference_file']
    shell:
        r"""
        vsearch \
        --usearch_global \
        {input} \
        --db {params.alignment_reference} \
        --id 0 \
        --uc {output} \
        --quiet
        """



rule count_reads_basecall:
    input:
        expand(config['results_folder'] + "Basecall/{fastq_file}.fastq",
               fastq_file=glob_wildcards(config['results_folder'] + "Basecall/{fastq_file}.fastq").fastq_file)
    output:
        config['results_folder'] + "CountReads/count.reads.basecall.csv"
    params:
        process = "basecall"
    script:
        "scripts/CountReads.py"
rule count_reads_barcode:
    input:
        expand(config['results_folder'] + "Barcode/{barcode}.merged.fastq",
               barcode=glob_wildcards(config['results_folder'] + "Barcode/{barcode}.merged.fastq").barcode)
    output:
        config['results_folder'] + "CountReads/count.reads.barcode.csv"
    params:
        process = "barcode"
    script:
        "scripts/CountReads.py"
rule count_reads_cutadapt:
    input:
        expand(config['results_folder'] + "Trim/{barcode}.trim.fastq",
               barcode=glob_wildcards(config['results_folder'] + "Trim/{barcode}.trim.fastq").barcode)
    output:
        config['results_folder'] + "CountReads/count.reads.trim.csv"
    params:
        process = "cutadapt"
    script:
        "scripts/CountReads.py"
rule count_reads_filtering:
    input:
        expand(config['results_folder'] + "NanoFilt/{barcode}.nanofilt.fastq",
               barcode=glob_wildcards(config['results_folder'] + "NanoFilt/{barcode}.nanofilt.fastq").barcode)
    output:
        config['results_folder'] + "CountReads/count.reads.nanofilt.csv"
    params:
        process = "filtering"
    script:
        "scripts/CountReads.py"
rule count_reads_guppy:
    input:
        expand(config['results_folder'] + "Alignment/guppy/alignment_summary/{barcode}.alignment.summary.csv",
               barcode=glob_wildcards(config['results_folder'] + "Alignment/guppy/alignment_summary/{barcode}.alignment.summary.csv").barcode)
    output:
        config['results_folder'] + "CountReads/count.reads.guppy.csv"
    params:
        process = "mapping"
    script:
        "scripts/CountReads.py"
rule count_reads_master_sheet:
    input:
        rules.count_reads_barcode.output[0],
        rules.count_reads_cutadapt.output[0],
        rules.count_reads_filtering.output[0],
        rules.count_reads_guppy.output[0]
    output:
        master_csv = config['results_folder'] + "CountReads/master.data.set.csv"
    shell:
        r"""
        # write a header line to the output file
        echo -e "barcode\treads\tprocess" > {output}
        
        # for each input, do the following
        for item in {input}; do
        
            # do not get the first line in the file (i.e. skip header line) and concatenate it to the end of the output file
            tail -n +2 "$item" >> {output}
        done
        """


rule nanoplot:
    input:
        rules.basecall.output[0] + "sequencing_summary.txt"
    output:
        directory(config['results_folder'] + "Visuals/NanoPlot/")
    shell:
        r"""
        NanoPlot --summary {input} --outdir {output}
        """



rule plotly_barcode_histogram:
    input:
        rules.count_reads_barcode.output[0]
    output:
        config['results_folder'] + "Visuals/Plotly/Histograms/plotly.barcode.histogram.html"
    params:
        sub_title = "Performed after Merging Files"
    script:
        "scripts/PlotlyHistogram.py"
rule plotly_cutadapt_histogram:
    input:
        rules.count_reads_cutadapt.output[0]
    output:
        config['results_folder'] + "Visuals/Plotly/Histograms/plotly.cutadapt.histogram.html"
    params:
        sub_title = "Performed after Cutadapt"
    script:
        "scripts/PlotlyHistogram.py"
rule plotly_filtering_histogram:
    input:
        rules.count_reads_filtering.output[0]
    output:
        config['results_folder'] + "Visuals/Plotly/Histograms/plotly.filtering.histogram.html"
    params:
        sub_title = "Performed after Filtering"
    script:
        "scripts/PlotlyHistogram.py"
rule plotly_mapping_histogram:
    input:
        rules.count_reads_guppy.output[0]
    output:
        config['results_folder'] + "Visuals/Plotly/Histograms/plotly.mapping.histogram.html"
    params:
        sub_title = "Performed after Mapping"
    script:
        "scripts/PlotlyHistogram.py"

rule plotly_box_whisker_generation:
    input:
        rules.count_reads_barcode.output[0],
        rules.count_reads_cutadapt.output[0],
        rules.count_reads_filtering.output[0],
        rules.count_reads_guppy.output[0]
    output:
        config['results_folder'] + "Visuals/Plotly/plotly.box.whisker.html"
    script:
        "scripts/PlotlyBoxWhisker.py"
