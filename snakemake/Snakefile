import glob
import os

configfile: "config.yaml"
os.makedirs(config['results_folder'] + "Basecall", exist_ok=True)

FAST5_FILES = glob_wildcards(config['results_folder'] + "DataFiles/fast5/{fast5_files}.fast5").fast5_files

def get_merged_barcodes(wildcards):
    # get the output from barcoding
    temp_dir = checkpoints.barcode.get(**wildcards).output[0]
    # create a set; no duplicates can be present
    barcodes = set()

    # iterate through fast5_folder names
    for item in os.listdir(temp_dir):
        # iterate through barcode folders under the fast5_folder names
        for folder in os.listdir(temp_dir + "/" + item):

            # if `barcode` or `unclassified` in the folder name, add it to our barcode folders
            if "barcode" in folder or "unclassified" in folder:
                barcodes.add(folder)

    # return the format `config['results_folder'] + "Barcode/barcode##.merged.fastq` as input for rule all
    merged_files = [config['results_folder'] + "Barcode/" + barcode + ".merged.fastq" for barcode in barcodes]
    return merged_files

rule all:
    input:
        # basecall
        expand(config['results_folder'] + "Basecall/{fast5_file}", fast5_file=FAST5_FILES),

        # barcode
        lambda wildcards: get_merged_barcodes(FAST5_FILES),

rule basecall:
    input:
         config['results_folder'] + "DataFiles/fast5/{fast5_file}.fast5"
    output:
        directory(config['results_folder'] + "Basecall/{fast5_file}")
    shell:
         r"""
         ls {input} \
         | \
         guppy_basecaller \
         --save_path {output} \
         --quiet \
         --config dna_r9.4.1_450bps_fast.cfg \
         --num_callers 2 \
         --cpu_threads_per_caller 6
         """

checkpoint barcode:
    input:
        #config['results_folder'] + "Basecall/{fast5_files}"
        #config['results_folder'] + "Basecall"
        rules.basecall.output
    output:
        directory(config['results_folder'] + ".barcodeTempOutput/{fast5_file}")
        #directory(config['results_folder'] + ".barcodeTempOutput")
    shell:
         r"""
         guppy_barcoder \
         --input_path {input} \
         --save_path {output} \
         --barcode_kits EXP-PBC096 \
         --recursive \
         --worker_threads 12 \
         --quiet
         
         # for item in {input}; do
         #        guppy_barcoder \
         #        --input_path $item \
         #        --save_path {output} \
         #        --barcode_kits EXP-PBC096 \
         #        --recursive \
         #        --worker_threads 12
         # done
         """

def get_merged_input(wildcards):
    return glob.glob(config['results_folder'] + f".barcodeTempOutput/**/{wildcards.barcode}/*.fastq")

rule merge_files:
    input:
        get_merged_input
        #expand(config['results_folder'] + ".barcodeTempOutput/{fast5_file}", fast5_file=FAST5_FILES)
    output:
        config['results_folder'] + "Barcode/{barcode}.merged.fastq"
    params:
        barcode = "{barcode}"
    shell:
        r"""
        echo {input}
        """

rule NanoQCPreTrim:
    input:
        config['results_folder'] + "Barcode/{barcode_number}.merged.fastq"
    output:
        directory(config['results_folder'] + "NanoQC/Pre-Trim/{barcode_number}")
    params:
        barcode_number = "{barcode_number}"
    shell:
        r"""
        NanoQC -o {output} {input}
        
        mv {output}/*.html {output}/{params.barcode_number}.nanoqc.pre-trim.html
        mv {output}/*.log {output}/{params.barcode_number}.nanoqc.pre-trim.log
        """

rule trim_reads:
    input:
        config['results_folder'] + "Barcode/{barcode_number}.merged.fastq"
    output:
        config['results_folder'] + "Trim/{barcode_number}.trimmed.fastq"
    params:
        primer_3_adapter = config['trim_three_prime_adapter'],
        primer_5_adapter = config['trim_five_prime_adapter'],
        error_rate = config['trim_error_rate']
    shell:
        r"""
        cutadapt \
        --revcomp \
        --quiet \
        --cores 0 \
        --adapter {params.primer_3_adapter} \
        --front {params.primer_5_adapter} \
        --error-rate {params.error_rate} \
        --output {output} \
        {input}
        """

rule NanoQCPostTrim:
    input:
        config['results_folder'] + "Trim/{barcode_number}.trimmed.fastq"
    output:
        directory(config['results_folder'] + "NanoQC/Post-Trim/{barcode_number}")
    params:
        barcode_number = "{barcode_number}"
    shell:
        r"""
        NanoQC -o {output} {input}
        
        mv {output}/*.html {output}/{params.barcode_number}.nanoqc.post-trim.html
        mv {output}/*.log {output}/{params.barcode_number}.nanoqc.post-trim.log
        """
# TODO: Move nanoqc files only if they are present
