import glob
import os

configfile: "config.yaml"
os.makedirs(config['results_folder'] + "Basecall", exist_ok=True)

FAST5_FILES = glob_wildcards(config['results_folder'] + "DataFiles/fast5/{fast5_files}.fast5").fast5_files

def get_basecall_files(wildcards):
    complete_basecalling = checkpoints.basecall.get(**wildcards).output[0]


def get_merged_barcodes(wildcards):
    # complete_basecalling = checkpoints.basecall.get(**wildcards).output[0]
    temp_dir = checkpoints.barcode.get(**wildcards).output[0]

    barcodes = set()
    for folder in os.listdir(temp_dir):
        if "barcode" in folder or "unclassified" in folder:
            barcodes.add(folder)

    merged_files = [config['results_folder'] + "Barcode/" + barcode + ".merged.fastq" for barcode in barcodes]
    return merged_files



rule all:
    input:
        # basecall
        expand(config['results_folder'] + "Basecall/{fast5_file}", fast5_file=FAST5_FILES),

        # barcode
        get_merged_barcodes,

        # merge files
        expand(config['results_folder'] + "Barcode/{barcode_number}.merged.fastq",
               barcode_number=glob_wildcards(config['results_folder'] + "Barcode/{barcode_number}.merged.fastq").barcode_number),

        # NanoQC pre-trim
        expand(config['results_folder'] + "NanoQC/Pre-Trim/{barcode_number}",
               barcode_number=glob_wildcards(config['results_folder'] + "Barcode/{barcode_number}.merged.fastq").barcode_number),

        # # Trim reads
        expand(config['results_folder'] + "Trim/{barcode_number}.trimmed.fastq",
               barcode_number=glob_wildcards(config['results_folder'] + "Barcode/{barcode_number}.merged.fastq").barcode_number),

        # # NanoQC post-trim
        expand(config['results_folder'] + "NanoQC/Post-Trim/{barcode_number}",
               barcode_number=glob_wildcards(config['results_folder'] + "Trim/{barcode_number}.trimmed.fastq").barcode_number)

checkpoint basecall:
    input:
         config['results_folder'] + "DataFiles/fast5/{fast5_file}.fast5"
    output:
        directory(config['results_folder'] + "Basecall/{fast5_file}")
    shell:
         r"""
         ls {input} \
         | \
         guppy_basecaller \
         --save_path {output} \
         --quiet \
         --config dna_r9.4.1_450bps_fast.cfg \
         --num_callers 2 \
         --cpu_threads_per_caller 6
         """

checkpoint barcode:
    input:
        config['results_folder'] + "Basecall"
    output:
        directory(config['results_folder'] + ".barcodeTempOutput")
    shell:
         r"""
         for item in {input}; do
                guppy_barcoder \
                --input_path $item \
                --save_path {output} \
                --barcode_kits EXP-PBC096 \
                --recursive \
                --worker_threads 12
         done         
         """

def get_merged_input(wildcards):
    return glob.glob(f"{config['results_folder']}" + f".barcodeTempOutput/{wildcards.barcode}/*.fastq")
    # return glob.glob(f"/Users/joshl/PycharmProjects/ARS/Results/.barcodeTempOutput/**/{wildcards.barcode}/*.fastq")

rule merge_files:
    input:
        get_merged_input
    output:
        config['results_folder'] + "Barcode/{barcode}.merged.fastq"
    shell:
        r"""
        # iterate through each input and append it to the output
        for item in {input}; do
            cat $item >> {output}
        done        
        """

rule NanoQCPreTrim:
    input:
        config['results_folder'] + "Barcode/{barcode_number}.merged.fastq"
    output:
        directory(config['results_folder'] + "NanoQC/Pre-Trim/{barcode_number}")
    params:
        barcode_number = "{barcode_number}"
    shell:
        r"""
        NanoQC -o {output} {input}
        
        mv {output}/*.html {output}/{params.barcode_number}.nanoqc.pre-trim.html
        mv {output}/*.log {output}/{params.barcode_number}.nanoqc.pre-trim.log
        """

rule trim_reads:
    input:
        config['results_folder'] + "Barcode/{barcode_number}.merged.fastq"
    output:
        config['results_folder'] + "Trim/{barcode_number}.trimmed.fastq"
    params:
        primer_3_adapter = config['trim_three_prime_adapter'],
        primer_5_adapter = config['trim_five_prime_adapter'],
        error_rate = config['trim_error_rate']
    shell:
        r"""
        cutadapt \
        --revcomp \
        --quiet \
        --cores 0 \
        --adapter {params.primer_3_adapter} \
        --front {params.primer_5_adapter} \
        --error-rate {params.error_rate} \
        --output {output} \
        {input}
        """

rule NanoQCPostTrim:
    input:
        config['results_folder'] + "Trim/{barcode_number}.trimmed.fastq"
    output:
        directory(config['results_folder'] + "NanoQC/Post-Trim/{barcode_number}")
    params:
        barcode_number = "{barcode_number}"
    shell:
        r"""
        NanoQC -o {output} {input}
        
        mv {output}/*.html {output}/{params.barcode_number}.nanoqc.post-trim.html
        mv {output}/*.log {output}/{params.barcode_number}.nanoqc.post-trim.log
        """
# TODO: Move nanoqc files only if they are present
