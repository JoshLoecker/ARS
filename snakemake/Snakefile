import os
from pathlib import Path

configfile: "config.yaml"


TEMP_BARCODE_FOLDER = config['results_folder']
FAST5_FILES, = glob_wildcards(config['results_folder'] + "DataFiles/fast5/{fast5_files}.fast5")
BARCODE_FOLDER = os.listdir(config['results_folder'] + ".")

rule all:
    input:
        expand(config['results_folder'] + "Basecall/{fast5_file}", fast5_file=FAST5_FILES),

        # expand(config['results_folder'] + "Barcode/{folder}.merged.fastsq"),
        expand(config['results_folder'] + "Barcode/{folder}.merged.fastq",
               folder=[
                   Path(
                       os.path.join(
                           TEMP_BARCODE_FOLDER, folder)
                   ).is_dir() for folder in os.listdir(
                       TEMP_BARCODE_FOLDER
                   )
         ]
         )
        # config['results_folder'] + "Barcode/merge_complete",  # SAVE THIS
        # expand(config['results_folder'] + "Barcode/{barcode_folder}", barcode_folder=)

rule basecall:
    input:
         config['results_folder'] + "DataFiles/fast5/{fast5_file}.fast5"
    output:
        directory(config['results_folder'] + "Basecall/{fast5_file}")
    shell:
         r"""
         ls {input} \
         | \
         guppy_basecaller \
         --save_path {output} \
         --quiet \
         --config dna_r9.4.1_450bps_fast.cfg \
         --num_callers 2 \
         --cpu_threads_per_caller 6
         """

checkpoint barcode:
    input:
        config['results_folder'] + "Basecall/"
    output:
        temp(directory(config['results_folder'] + ".barcodeTempOutput/"))
    shell:
         r"""
         guppy_barcoder \
        --input_path {input} \
        --save_path {output} \
        --barcode_kits EXP-PBC096 \
        --recursive
         """

def aggregate_barcode_folder_names(wildcards):
    checkpoint_output = checkpoints.barcode.get().output[0]
    folders = expand(checkpoint_output + "{folder}/{fastq_file}.fastq",
                     folder=wildcards.folder,
                     fastq_file=glob_wildcards(os.path.join(checkpoint_output, "{fastq_file}.fastq")).fastq)
    print(folders)
    return folders

rule merge_files:
    input:
        # config['results_folder'] + ".barcodeTempOutput/",
        aggregate_barcode_folder_names
    output:
        # touch(config['results_folder'] + "Barcode/merge_complete"),  # BEST OPTION SO FAR
        config['results_folder'] + "Barcode/{folder}.merged.fastq",
    shell:
        "echo {input}"


rule trim_reads:
    input:
        config['results_folder'] + "Barcode/{folder}.merged.fastq",
    output:
        config['results_folder'] + "Trim/{folder}.trimmed.fastq"
    shell:
        "echo {input}"
